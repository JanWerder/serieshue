@page "{Tcode?}"
@using Models
@model serieshue.IndexModel

@{
    Layout = "_Layout";
}
<div class="row" x-data="title()">
    <div class="p-4 p-md-4 mb-4 rounded text-bg-dark col-md-12 shadow-lg">
        <div class="rounded ship-hero-inside">
            <div class="col-md-12 px-0 row">
                <div class="col-lg-9">
                    <span class="fst-italic">
                        <span class="fs-1">@Model.Title.PrimaryTitle</span>
                        @if (Model.Title.PrimaryTitle != Model.Title.OriginalTitle)
                        {
                            <small class="fst-italic">(@Model.Title.OriginalTitle)</small>
                        }
                    </span>
                    <br>

                    <small>@Model.Title.StartYear - @Model.Title.EndYear</small>
                    <p class="lead my-1">@Model.Title.Genres</p>
                    @if (Model.AdditionalInfo != null){
                        <hr>
                        <p class="lead my-1">@Model.AdditionalInfo.Plot</p>
                    }
                </div>
                <div class="col-lg-3 py-3">
                    <a href="https://www.imdb.com/title/@Model.Title.Tconst" class="btn btn-light float-end" target="_blank">IMDB</a>
                    <br><br>
                    @if (Model.Title.Rating != null)
                    {
                        <p class="float-end">Rating: @Model.Title.Rating (@Model.Title.Votes Votes)</p>
                    }
                </div>

            </div>
        </div>
    </div>

    <div class="row flex justify-content-md-center mb-3">
        <div class="card flex-row px-4 py-2 shadow-lg col-lg-8">
            <div class="card-body row">
                <div class="form-check form-switch col-lg-4">
                    <input class="form-check-input" type="checkbox" role="switch" id="swFlip" x-model="swFlip">
                    <label class="form-check-label" for="swFlip">Flip Seasons/Episodes</label>
                </div>
                <div class="d-flex gap-3 col-lg-8 flex-wrap">
                    <span>Legend: </span>
                    <div class="d-block text-center">
                        <span class="great-scheme-1 demo-box"></span>
                        <span>Great</span>
                    </div>
                    <div class="d-block text-center">
                        <span class="good-scheme-1 demo-box"></span>
                        <span>Good</span>
                    </div>
                    <div class="d-block text-center">
                        <span class="regular-scheme-1 demo-box"></span>
                        <span>Regular</span>
                    </div>
                    <div class="d-block text-center">
                        <span class="bad-scheme-1 demo-box"></span>
                        <span>Bad</span>
                    </div>
                    <div class="d-block text-center">
                        <span class="garbage-scheme-1 demo-box"></span>
                        <span>Garbage</span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="position-relative d-flex justify-content-center" x-show.important="swFlip">
        <div class="card justify-content-center flex-row px-4 py-2 shadow-lg">
            <span class="caption-left">Episodes</span>
            <div class="table-responsive-sm fit-content">
                <div>
                    <table class="table table-light table-responsive caption-top border-white">
                        <caption class="text-center">Seasons</caption>
                        <thead class="border-white">
                            <tr class="border-white">
                                <th scope="col"></th>
                                @for (int i = 1; i <= Model.SeasonCount; i++)
                                {
                                    <th scope="col">@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody class="border-white">
                            @for (int j = 1; j <= Model.EpisodeCount; j++)
                            {
                                <tr>
                                    @for (int i = 0; i <= Model.SeasonCount; i++)
                                    {
                                        @if (i == 0)
                                        {
                                            <td scope="row">@j</td>
                                        }
                                        else
                                        {
                                            Episode episode = Model.Title.Episodes.Where(x => x.EpisodeNumber == j && x.SeasonNumber == i).FirstOrDefault();
                                            <td scope="row" data-rating="true" class="rating-td border-white">
                                                @if (episode != null)
                                                {
                                                    <a class="rating" target="_blank" href="https://www.imdb.com/title/@episode.Tconst/">@episode.Rating</a>
                                                }
                                            </td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="position-relative d-flex justify-content-center" x-show.important="!swFlip">
        <div class="card justify-content-center flex-row px-4 py-2 shadow-lg">
            <span class="caption-left">Seasons</span>
            <div class="table-responsive-sm fit-content">
                <div>
                    <table class="table table-light table-responsive caption-top border-white">
                        <caption class="text-center">Episodes</caption>
                        <thead class="border-white">
                            <tr class="border-white">
                                <th scope="col"></th>
                                @for (int i = 1; i <= Model.EpisodeCount; i++)
                                {
                                    <th scope="col">@i</th>
                                }
                            </tr>
                        </thead>
                        <tbody class="border-white">
                            @for (int j = 1; j <= Model.SeasonCount; j++)
                            {
                                <tr>
                                    @for (int i = 0; i <= Model.EpisodeCount; i++)
                                    {
                                        @if (i == 0)
                                        {
                                            <td scope="row">@j</td>
                                        }
                                        else
                                        {
                                            Episode episode = Model.Title.Episodes.Where(x => x.EpisodeNumber == i && x.SeasonNumber == j).FirstOrDefault();
                                            <td scope="row" data-rating="true" class="rating-td border-white">
                                                @if (episode != null)
                                                {
                                                    <a class="rating" target="_blank" href="https://www.imdb.com/title/@episode.Tconst/">@episode.Rating</a>
                                                }
                                            </td>
                                        }
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    function addClass(ratingValue, rating, scheme) {
        if (ratingValue > 8.5) {
            rating[i].classList.add("great-scheme-" + scheme);
        } else if (ratingValue >= 7.5) {
            rating[i].classList.add("good-scheme-" + scheme);
        } else if (ratingValue >= 6.5) {
            rating[i].classList.add("regular-scheme-" + scheme);
        } else if (ratingValue >= 5) {
            rating[i].classList.add("bad-scheme-" + scheme);
        } else if (ratingValue < 5) {
            rating[i].classList.add("garbage-scheme-" + scheme);
        }
    }

    function addHoverClass(e, table) {
        var row = e.target.parentNode.parentNode;
        var column = e.target.parentNode.cellIndex;

        if (row.cells === undefined) {
            return;
        }

        row.cells[0].classList.add('hovered');
        table.rows[0].cells[column].classList.add('hovered');
    }

    function removeHoverClass(e, table) {
        var row = e.target.parentNode.parentNode;
        var column = e.target.parentNode.cellIndex;

        if (row.cells === undefined) {
            return;
        }

        row.cells[0].classList.remove('hovered');
        table.rows[0].cells[column].classList.remove('hovered');
    }

    var scheme = 1;
    var rating = document.querySelectorAll('[data-rating="true"]');
    for (var i = 0; i < rating.length; i++) {
        var ratingValue = parseFloat(rating[i].innerText.replace(/,/g, '.'));
        if (ratingValue != "") {
            addClass(ratingValue, rating, scheme);
        }
    }

    var table = document.querySelector('table');
    var cells = table.querySelectorAll('a');
    for (var i = 0; i < cells.length; i++) {
        cells[i].addEventListener('mouseover', function (e) {
            addHoverClass(e, table);
        });
        cells[i].addEventListener('mouseout', function (e) {
            removeHoverClass(e, table);
        });
    }

    function title() {
        return {
            swFlip: false,
        }
    }
</script>
